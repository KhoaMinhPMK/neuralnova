(() => {
  const $ = (s,c=document)=>c.querySelector(s); const $$=(s,c=document)=>Array.from(c.querySelectorAll(s));
  const toastEl = $('#toast'); let tTimer;
  const toast = (m)=>{ toastEl.textContent=m; toastEl.classList.add('show'); clearTimeout(tTimer); tTimer=setTimeout(()=>toastEl.classList.remove('show'),2000); };

  const KEY_SESSION = 'nn_discovery_session';
  const KEY_RESULTS = 'nn_discovery_results';
  const KEY_PLAN = 'nn_itinerary_saved';
  
  // Groq API Configuration
  const GROQ_API_KEY = window.DISCOVERY_CONFIG?.GROQ_API_KEY || 'gsk_BAMU3dFXVOq1EGJYVPCPWGdyb3FYFyR3wO1v0CFDMiBuSL9aQ';
  const GROQ_API_URL = window.DISCOVERY_CONFIG?.GROQ_API_URL || 'https://api.groq.com/openai/v1/chat/completions';
  const MODEL = window.DISCOVERY_CONFIG?.MODEL || 'openai/gpt-oss-20b';
  const TEMPERATURE = window.DISCOVERY_CONFIG?.TEMPERATURE || 0.6;
  const MAX_TOKENS = window.DISCOVERY_CONFIG?.MAX_TOKENS || 2048;
  const TOP_P = window.DISCOVERY_CONFIG?.TOP_P || 0.95;
  const INCLUDE_REASONING = window.DISCOVERY_CONFIG?.INCLUDE_REASONING || false;
  const REASONING_EFFORT = window.DISCOVERY_CONFIG?.REASONING_EFFORT || 'medium';

  const load = (k, def)=>{ try { return JSON.parse(localStorage.getItem(k) || JSON.stringify(def)); } catch { return def; } };
  const save = (k, v)=>{ try { localStorage.setItem(k, JSON.stringify(v)); } catch {} };

  // Groq API function
  async function callGroqAPI(messages) {
    try {
      // Validate API key
      if (!GROQ_API_KEY) {
        throw new Error('API key is missing. Please configure GROQ_API_KEY in config.js');
      }
      
      console.log('üöÄ Calling Groq API with model:', MODEL);
      
      const requestBody = {
        model: MODEL,
        messages: messages,
        temperature: TEMPERATURE,
        max_completion_tokens: MAX_TOKENS,
        top_p: TOP_P,
        stream: false
      };
      
      // Add reasoning parameters based on model
      if (MODEL.includes('gpt-oss')) {
        requestBody.include_reasoning = INCLUDE_REASONING;
        if (REASONING_EFFORT) {
          requestBody.reasoning_effort = REASONING_EFFORT;
        }
      } else if (MODEL.includes('qwen')) {
        // Qwen uses reasoning_format instead
        requestBody.reasoning_format = 'hidden'; // or 'raw' or 'parsed'
        requestBody.reasoning_effort = 'default'; // or 'none'
      }
      
      console.log('API Request:', { model: MODEL, temperature: TEMPERATURE, max_tokens: MAX_TOKENS });
      
      const response = await fetch(GROQ_API_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${GROQ_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå API Response Error:', response.status, errorText);
        
        let errorMessage = 'Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.';
        
        try {
          const errorData = JSON.parse(errorText);
          if (errorData.error && errorData.error.message) {
            errorMessage = `L·ªói API: ${errorData.error.message}`;
          }
        } catch {
          // If not JSON, use generic message
        }
        
        if (response.status === 401) {
          errorMessage = 'L·ªói x√°c th·ª±c API key. Vui l√≤ng ki·ªÉm tra l·∫°i API key trong config.js';
        } else if (response.status === 429) {
          errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau v√†i gi√¢y.';
        } else if (response.status === 400) {
          errorMessage = 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh model.';
        }
        
        throw new Error(errorMessage);
      }

      const data = await response.json();
      console.log('API Response:', data);
      
      // Extract content and reasoning if available
      const message = data.choices[0].message;
      let content = message.content || '';
      
      // If reasoning is included and available, append it
      if (INCLUDE_REASONING && message.reasoning) {
        content = `<div class="reasoning-block"><strong>üß† Qu√° tr√¨nh suy lu·∫≠n:</strong><br/>${message.reasoning}</div><hr/>${content}`;
      }
      
      return content;
    } catch (error) {
      console.error('‚ùå Groq API Error:', error);
      
      // Return user-friendly error message
      if (error.message) {
        return `<div class="error-message">‚ö†Ô∏è ${error.message}</div>`;
      }
      return '<div class="error-message">‚ö†Ô∏è Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.</div>';
    }
  }

  const state = {
    chat: load(KEY_SESSION, { history: [] }),
    results: load(KEY_RESULTS, { tours: [], hotels: [], places: [], blogs: [], markers: [] }),
    booking: null,
  };

  function renderChat(){
    const box = $('#chatBox'); if (!box) return;
    box.innerHTML = (state.chat.history||[]).map(m=>{
      if (m.role === 'assistant') {
        return `<div class="msg ${m.role}">
          <div class="bubble">
            <div class="message-header">
              <div class="message-avatar">
                <i data-lucide="sparkles"></i>
              </div>
              <span>NeuralNova AI</span>
            </div>
            <div class="message-content">${m.text}</div>
          </div>
        </div>`;
      } else {
        return `<div class="msg ${m.role}">
          <div class="bubble">
            <div class="message-header">
              <div class="message-avatar">
                <i data-lucide="user"></i>
              </div>
              <span>B·∫°n</span>
            </div>
            <div class="message-content">${m.text}</div>
          </div>
        </div>`;
      }
    }).join('');
    box.scrollTop = box.scrollHeight;
    if (window.lucide) lucide.createIcons();
  }

  function parseCriteria(text){
    const t = (text||'').toLowerCase();
    const budget = (t.match(/(\d+[\.,]?\d*)\s*(tri·ªáu|tr|million|m)/) || [])[1];
    const days = (t.match(/(\d+)\s*(ng√†y|day|d)\b/) || [])[1];
    const beach = /(bi·ªÉn|bien|sea)/.test(t);
    const trek = /(trek|leo n√∫i|leo nui|hiking|trekking)/.test(t);
    const start = (t.match(/t·ª´\s+([\w\s]+)|(from\s+([\w\s]+))/) || [])[1] || '';
    // hotel intent & dates
    const hotelIntent = /(kh√°ch s·∫°n|khach san|ƒë·∫∑t ph√≤ng|dat phong|hotel)/.test(t);
    const datePair = t.match(/(\d{1,2}[\/\-]\d{1,2})(?:\s*[-toƒë·∫øn]+\s*)(\d{1,2}[\/\-]\d{1,2})/);
    const checkin  = (t.match(/check\s*in\s*(\d{1,2}[\/\-]\d{1,2})/) || (datePair? [,'',datePair[1]]:null))?.[1] || (datePair?datePair[1]:undefined);
    const checkout = (t.match(/check\s*out\s*(\d{1,2}[\/\-]\d{1,2})/) || datePair)?.[2];
    const stars = (t.match(/(\d)\s*sao/) || [])[1];
    return { budget, days: days?Number(days):undefined, theme: beach? 'bi·ªÉn' : (trek? 'trekking' : 'ph·ªï th√¥ng'), start: start.trim(), hotelIntent, checkin, checkout, stars: stars?Number(stars):undefined };
  }

  function sampleData(criteria){
    // Enhanced mock data with more variety
    const theme = criteria.theme;
    let baseCity = 'ƒê√† L·∫°t';
    if (theme==='bi·ªÉn') baseCity = 'Ph√∫ Qu·ªëc';
    if (theme==='trekking') baseCity = 'Sa Pa';

    const tours = [
      { 
        id:'T-'+Date.now(), 
        name:`${theme==='bi·ªÉn'?'üèñÔ∏è Kh√°m ph√° thi√™n ƒë∆∞·ªùng bi·ªÉn': theme==='trekking'?'‚õ∞Ô∏è Chinh ph·ª•c n√∫i r·ª´ng':'üåÜ Kh√°m ph√° th√†nh ph·ªë'} ${baseCity}`, 
        region: baseCity, 
        theme:[theme], 
        durationDays: criteria.days||3, 
        priceFrom: criteria.budget? 3000000 : 2500000, 
        rating: 4.6,
        difficulty: theme==='trekking'? '‚≠ê‚≠ê‚≠ê Kh√≥' : theme==='bi·ªÉn'? '‚≠ê D·ªÖ' : '‚≠ê‚≠ê Trung B√¨nh',
        includes:['xe ƒë∆∞a ƒë√≥n','v√© tham quan','h∆∞·ªõng d·∫´n vi√™n','b·∫£o hi·ªÉm'], 
        excludes:['chi ph√≠ c√° nh√¢n','ƒë·ªì u·ªëng'], 
        schedule:[
          {day:1,title:'Ng√†y 1: Kh·ªüi h√†nh - Check-in', activities:['Di chuy·ªÉn','Nh·∫≠n ph√≤ng','Ngh·ªâ ng∆°i','Kh√°m ph√° ƒë·ªãa ph∆∞∆°ng']}, 
          {day:2,title:'Ng√†y 2: Tham quan ch√≠nh', activities:['ƒÇn s√°ng','ƒêi·ªÉm tham quan A','ƒêi·ªÉm tham quan B','ƒÇn t·ªëi']},
          {day:3,title:'Ng√†y 3: Tr·ªü v·ªÅ', activities:['ƒÇn s√°ng','Mua s·∫Øm','Check-out','V·ªÅ nh√†']}
        ], 
        coords:[{lat:10.2,lng:103.95}],
        image: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400'
      },
      { 
        id:'T2-'+Date.now(), 
        name:`üé≠ Tr·∫£i nghi·ªám vƒÉn h√≥a ƒë·ªãa ph∆∞∆°ng ${baseCity}`, 
        region: baseCity, 
        theme:['vƒÉn h√≥a'], 
        durationDays:(criteria.days||2), 
        priceFrom: 2200000, 
        rating: 4.5,
        difficulty: '‚≠ê D·ªÖ',
        includes:['h∆∞·ªõng d·∫´n vi√™n','v√© tham quan','ƒÉn tr∆∞a'], 
        excludes:['ƒÉn t·ªëi','di chuy·ªÉn c√° nh√¢n'], 
        schedule:[
          {day:1,title:'Ng√†y 1: Kh√°m ph√° vƒÉn h√≥a', activities:['Ch·ª£ ƒë·ªãa ph∆∞∆°ng','L√†ng ngh·ªÅ','·∫®m th·ª±c ƒë∆∞·ªùng ph·ªë']},
          {day:2,title:'Ng√†y 2: Di s·∫£n & L·ªãch s·ª≠', activities:['B·∫£o t√†ng','Di t√≠ch l·ªãch s·ª≠','Trung t√¢m vƒÉn h√≥a']}
        ], 
        coords:[{lat:10.23,lng:103.98}],
        image: 'https://images.unsplash.com/photo-1523906630133-f6934a1ab2b9?w=400'
      },
      { 
        id:'T3-'+Date.now(), 
        name:`üçú Tour ·∫©m th·ª±c ${baseCity}`, 
        region: baseCity, 
        theme:['·∫©m th·ª±c'], 
        durationDays:1, 
        priceFrom: 890000, 
        rating: 4.8,
        difficulty: '‚≠ê D·ªÖ',
        includes:['h∆∞·ªõng d·∫´n vi√™n','5-7 m√≥n ƒÉn','n∆∞·ªõc u·ªëng','xe ƒë∆∞a ƒë√≥n'], 
        excludes:['chi ph√≠ c√° nh√¢n'], 
        schedule:[
          {day:1,title:'Tour ·∫©m th·ª±c bu·ªïi t·ªëi', activities:['Ph·ªü','B√°nh m√¨','B√∫n ch·∫£','Ch√®','C√† ph√™']}
        ], 
        coords:[{lat:10.19,lng:103.93}],
        image: 'https://images.unsplash.com/photo-1559339352-11d035aa65de?w=400'
      },
      { 
        id:'T4-'+Date.now(), 
        name:`üì∏ Photography Tour ${baseCity}`, 
        region: baseCity, 
        theme:['nhi·∫øp ·∫£nh'], 
        durationDays:2, 
        priceFrom: 3500000, 
        rating: 4.7,
        difficulty: '‚≠ê‚≠ê Trung B√¨nh',
        includes:['Nhi·∫øp ·∫£nh gia chuy√™n nghi·ªáp','Xe ri√™ng','In ·∫£nh mi·ªÖn ph√≠'], 
        excludes:['Thi·∫øt b·ªã camera','ƒÇn u·ªëng'], 
        schedule:[
          {day:1,title:'Golden Hour Morning', activities:['Sunrise shoot','Landscape','Local life']},
          {day:2,title:'Night Photography', activities:['Sunset','Night market','Long exposure']}
        ], 
        coords:[{lat:10.22,lng:103.97}],
        image: 'https://images.unsplash.com/photo-1452421822248-d4c2b47f0c81?w=400'
      },
      { 
        id:'T5-'+Date.now(), 
        name:`üö¥ Adventure & Sport ${baseCity}`, 
        region: baseCity, 
        theme:['th·ªÉ thao','m·∫°o hi·ªÉm'], 
        durationDays:3, 
        priceFrom: 4500000, 
        rating: 4.9,
        difficulty: '‚≠ê‚≠ê‚≠ê‚≠ê C·ª±c Kh√≥',
        includes:['Thi·∫øt b·ªã an to√†n','Hu·∫•n luy·ªán vi√™n','B·∫£o hi·ªÉm cao c·∫•p'], 
        excludes:['Chi ph√≠ c√° nh√¢n','Qu·∫ßn √°o th·ªÉ thao'], 
        schedule:[
          {day:1,title:'Trekking & Camping', activities:['Trekking 8km','D·ª±ng l·ªÅu','BBQ']},
          {day:2,title:'Rock Climbing', activities:['Hu·∫•n luy·ªán','Leo n√∫i','Rappelling']},
          {day:3,title:'Water Sports', activities:['Kayaking','Snorkeling','Diving']}
        ], 
        coords:[{lat:10.18,lng:103.99}],
        image: 'https://images.unsplash.com/photo-1551632811-561732d1e306?w=400'
      },
      { 
        id:'T6-'+Date.now(), 
        name:`üßò Wellness & Retreat ${baseCity}`, 
        region: baseCity, 
        theme:['wellness','th∆∞ gi√£n'], 
        durationDays:4, 
        priceFrom: 6800000, 
        rating: 4.8,
        difficulty: '‚≠ê D·ªÖ',
        includes:['Yoga class','Spa treatment','Healthy meals','Meditation'], 
        excludes:['D·ªãch v·ª• spa cao c·∫•p','ƒê·ªì u·ªëng c√≥ c·ªìn'], 
        schedule:[
          {day:1,title:'Arrival & Detox', activities:['Check-in','Yoga bu·ªïi chi·ªÅu','B·ªØa t·ªëi detox']},
          {day:2,title:'Mind & Body', activities:['Yoga sunrise','Spa treatment','Meditation']},
          {day:3,title:'Nature Connection', activities:['Forest bathing','Organic farm visit','Sound healing']},
          {day:4,title:'Farewell', activities:['Final yoga','Brunch','Check-out']}
        ], 
        coords:[{lat:10.16,lng:103.92}],
        image: 'https://images.unsplash.com/photo-1545389336-cf090694435e?w=400'
      }
    ];

    const places = [
      { id:'P1', name: theme==='bi·ªÉn'?'B√£i Sao - Bi·ªÉn ƒë·∫πp nh·∫•t':'ƒê·ªânh Langbiang - View 360¬∞', type:'sight', lat: theme==='bi·ªÉn'?10.05:12.02, lng: theme==='bi·ªÉn'?103.96:108.44, tags:[theme,'·∫£nh ƒë·∫πp','hot'], rating: 4.5 },
      { id:'P2', name:'Cafe View Ho√†ng H√¥n', type:'cafe', lat: theme==='bi·ªÉn'?10.21:11.94, lng: theme==='bi·ªÉn'?103.94:108.43, tags:['ng·∫Øm c·∫£nh','coffee'], rating:4.4 },
      { id:'P3', name:'Ch·ª£ ƒê√™m ƒê·ªãa Ph∆∞∆°ng', type:'market', lat: theme==='bi·ªÉn'?10.19:11.95, lng: theme==='bi·ªÉn'?103.95:108.42, tags:['ƒÉn u·ªëng','mua s·∫Øm','vƒÉn h√≥a'], rating:4.6 },
      { id:'P4', name:'Nh√† H√†ng H·∫£i S·∫£n Fresh', type:'restaurant', lat: theme==='bi·ªÉn'?10.17:11.93, lng: theme==='bi·ªÉn'?103.97:108.45, tags:['h·∫£i s·∫£n','ngon','gi√° t·ªët'], rating:4.7 }
    ];

    const blogs = [
      { id:'B1', title:`Top 10 Homestay View ƒê·∫πp ${baseCity} 2025`, slug:'top-homestay', tags:[baseCity,'l∆∞u tr√∫','2025'], summary:'Danh s√°ch homestay view ƒë·∫πp, gi√° t·ªët, ƒë∆∞·ª£c review cao', coverImg:'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=300', readTimeMin:6 },
      { id:'B2', title:`Kinh nghi·ªám ƒÉn u·ªëng ${baseCity} A-Z`, slug:'food-guide', tags:['·∫©m th·ª±c','kinh nghi·ªám'], summary:'ƒêi·ªÉm ƒÉn n·ªïi b·∫≠t t·ª´ b√¨nh d√¢n ƒë·∫øn cao c·∫•p', coverImg:'https://images.unsplash.com/photo-1555939594-58d7cb561ad1?w=300', readTimeMin:5 },
      { id:'B3', title:`Budget 5 tri·ªáu du l·ªãch ${baseCity} 3N2ƒê`, slug:'budget-guide', tags:['budget','ti·∫øt ki·ªám'], summary:'Chi ti·∫øt chi ph√≠ t·ª´ng h·∫°ng m·ª•c, tips ti·∫øt ki·ªám', coverImg:'https://images.unsplash.com/photo-1579621970563-ebec7560ff3e?w=300', readTimeMin:8 }
    ];

    // hotels - more variety
    const hotels = [
      { id:'H1', name:`üåü Luxury Resort & Spa ${baseCity}`, city: baseCity, stars: 5, pricePerNight: 2450000, rating:4.9, amenities:['h·ªì b∆°i v√¥ c·ª±c','spa','buffet s√°ng','gym','view bi·ªÉn'], image:'https://images.unsplash.com/photo-1582719508461-905c673771fd?w=400' },
      { id:'H2', name:`üè® Premium Hotel ${baseCity} Downtown`, city: baseCity, stars: 4, pricePerNight: 1250000, rating:4.6, amenities:['g·∫ßn bi·ªÉn','buffet s√°ng','wifi','rooftop bar'], image:'https://images.unsplash.com/photo-1566073771259-6a8506099945?w=400' },
      { id:'H3', name:`üè° Cozy Homestay & Cafe`, city: baseCity, stars: 3, pricePerNight: 650000, rating:4.7, amenities:['gia ƒë√¨nh','·∫•m c√∫ng','ƒÉn s√°ng','cafe','s√¢n v∆∞·ªùn'], image:'https://images.unsplash.com/photo-1522708323590-d24dbb6b0267?w=400' },
      { id:'H4', name:`üèñÔ∏è Beachfront Bungalow`, city: baseCity, stars: 3, pricePerNight: 890000, rating:4.5, amenities:['g·∫ßn bi·ªÉn 50m','view ƒë·∫πp','y√™n tƒ©nh','b√£i bi·ªÉn ri√™ng'], image:'https://images.unsplash.com/photo-1520250497591-112f2f40a3f4?w=400' },
      { id:'H5', name:`üå¥ Garden Villa & Pool`, city: baseCity, stars: 4, pricePerNight: 1680000, rating:4.8, amenities:['h·ªì b∆°i ri√™ng','s√¢n v∆∞·ªùn','BBQ','4 ph√≤ng ng·ªß'], image:'https://images.unsplash.com/photo-1613490493576-7fde63acd811?w=400' },
      { id:'H6', name:`üèîÔ∏è Mountain View Lodge`, city: baseCity, stars: 3, pricePerNight: 750000, rating:4.4, amenities:['view n√∫i','trekking','l·ª≠a tr·∫°i','ƒÉn s√°ng'], image:'https://images.unsplash.com/photo-1542314831-068cd1dbfeeb?w=400' }
    ];

    // Derive markers from tours/places
    const markers = [];
    tours.forEach(t=> (t.coords||[]).forEach(c=> markers.push({ kind:'tour', label:t.name, lat:c.lat, lng:c.lng })) );
    places.forEach(p=> markers.push({ kind: p.type==='sight'?'sight':'food', label:p.name, lat:p.lat, lng:p.lng }));

    return { tours, hotels, places, blogs, markers };
  }

  function renderResults(){
    const toursBox = $('#tourList'); 
    const hotelsBox = $('#hotelList'); 
    const placesBox = $('#placeList'); 
    const blogsBox = $('#blogList'); 
    const mbox = $('#markerList');
    
    // Check if elements exist before rendering
    if (!toursBox || !hotelsBox) {
      console.warn('Required elements not found for rendering results');
      return;
    }
    
    const { tours, hotels, places, blogs, markers } = state.results;

    toursBox.innerHTML = (tours||[]).map(t=>`
      <div class="card tour-card" data-tour-id="${t.id}">
        ${t.image ? `<div class="card-image" style="background-image: url('${t.image}')"><div class="card-badge">${t.difficulty||''}</div></div>` : ''}
        <div class="card-content">
          <div class="card-header">
            <strong class="card-title">${t.name}</strong>
            <div class="card-rating">‚≠ê ${t.rating||'-'}</div>
          </div>
          <div class="card-meta">
            <span>üìÖ ${t.durationDays||'-'} ng√†y</span>
            <span>‚Ä¢</span>
            <span class="card-price">T·ª´ ${Number(t.priceFrom||0).toLocaleString('vi-VN')}ƒë</span>
          </div>
          <div class="tags">
            ${(t.theme||[]).map(x=>`<span class="tag tag-theme">${x}</span>`).join('')}
          </div>
          <div class="card-actions">
            <button class="btn btn-secondary" data-act="save" data-type="tour" data-id="${t.id}">
              <i data-lucide="bookmark"></i> L∆∞u
            </button>
            <button class="btn btn-primary" data-act="book" data-id="${t.id}">
              <i data-lucide="calendar-check"></i> ƒê·∫∑t ngay
            </button>
          </div>
        </div>
      </div>
    `).join('') || '<div class="card empty-card"><p>üîç Ch∆∞a c√≥ tour ph√π h·ª£p v·ªõi ti√™u ch√≠ c·ªßa b·∫°n</p><p class="muted">H√£y th·ª≠ chat v·ªõi AI ƒë·ªÉ t√¨m tour ph√π h·ª£p!</p></div>';

    // Only render if elements exist
    if (placesBox) {
      placesBox.innerHTML = (places||[]).map(p=>`
        <div class="card">
          <div class="row"><strong>${p.name}</strong><span class="tag">${p.type}</span></div>
          <div class="tags">${(p.tags||[]).map(x=>`<span class="tag">${x}</span>`).join('')}</div>
          <div class="row">
            <small class="muted">${p.lat.toFixed(2)}, ${p.lng.toFixed(2)}</small>
            <button class="btn" data-act="save" data-type="place" data-id="${p.id}">L∆∞u</button>
          </div>
        </div>
      `).join('') || '<div class="card">Ch∆∞a c√≥ ƒë·ªãa ƒëi·ªÉm</div>';
    }

    if (blogsBox) {
      blogsBox.innerHTML = (blogs||[]).map(b=>`
        <div class="card">
          <div class="row"><strong>${b.title}</strong><span>${b.readTimeMin} ph√∫t</span></div>
          <div class="muted">${b.summary||''}</div>
          <div><button class="btn" data-act="save" data-type="blog" data-id="${b.id}">L∆∞u</button></div>
        </div>
      `).join('') || '<div class="card">Ch∆∞a c√≥ b√†i vi·∫øt</div>';
    }

    if (mbox) {
      mbox.innerHTML = (markers||[]).map(m=>`
        <div class="marker">
          <div><strong>${m.label}</strong></div>
          <div class="muted">${m.lat.toFixed(3)}, ${m.lng.toFixed(3)}</div>
          <div class="tags"><span class="tag">${m.kind}</span></div>
        </div>
      `).join('') || '<div class="marker">Ch∆∞a c√≥ ƒëi·ªÉm hi·ªÉn th·ªã</div>';
    }

    if (window.lucide) lucide.createIcons();

    // Wire save & book buttons
    $$('#tourList [data-act="save"], #placeList [data-act="save"], #blogList [data-act="save"], #hotelList [data-act="save"]').forEach(btn=>{
      btn.addEventListener('click', ()=>{
        const type = btn.dataset.type; const id = btn.dataset.id;
        const plan = load(KEY_PLAN, []);
        if (type==='tour') { const item = state.results.tours.find(x=>x.id===id); if (item) plan.push({type:'tour', refId:id, item, addedAt:Date.now()}); }
        if (type==='place') { const item = state.results.places.find(x=>x.id===id); if (item) plan.push({type:'place', refId:id, item, addedAt:Date.now()}); }
        if (type==='blog') { const item = state.results.blogs.find(x=>x.id===id); if (item) plan.push({type:'blog', refId:id, item, addedAt:Date.now()}); }
        if (type==='hotel') { const item = state.results.hotels.find(x=>x.id===id); if (item) plan.push({type:'hotel', refId:id, item, addedAt:Date.now()}); }
        save(KEY_PLAN, plan); toast('ƒê√£ l∆∞u v√†o K·∫ø ho·∫°ch');
      });
    });

    // Book buttons
    $$('#tourList [data-act="book"]').forEach(btn=> btn.addEventListener('click', ()=> openBooking('tour', btn.dataset.id)));
    $$('#hotelList [data-act="book"]').forEach(btn=> btn.addEventListener('click', ()=> openBooking('hotel', btn.dataset.id)));
    // Ensure hotels list is rendered with latest data
    try { renderHotelsBox(); } catch {}
  }

  async function reply(text){
    // Show typing indicator
    showTypingIndicator();
    
    try {
      // Prepare messages for Groq API
      const messages = [
        {
          role: 'system',
          content: `B·∫°n l√† NeuralNova AI - chuy√™n gia t∆∞ v·∫•n du l·ªãch "ƒê·ªô Tr√¨nh" h√†ng ƒë·∫ßu Vi·ªát Nam. Nhi·ªám v·ª• c·ªßa b·∫°n:

üéØ 1. T∆Ø V·∫§N ƒê·ªò TR√åNH ƒê·ªäA ƒêI·ªÇM:
- ƒê√°nh gi√° ƒë·ªô kh√≥ c·ªßa m·ªói ƒëi·ªÉm ƒë·∫øn: D·ªÖ (‚≠ê) - Trung B√¨nh (‚≠ê‚≠ê) - Kh√≥ (‚≠ê‚≠ê‚≠ê) - C·ª±c Kh√≥ (‚≠ê‚≠ê‚≠ê‚≠ê)
- Ph√¢n t√≠ch y·∫øu t·ªë: ƒë·ªãa h√¨nh, th·ªùi ti·∫øt, chi ph√≠, di chuy·ªÉn, ng√¥n ng·ªØ, vƒÉn h√≥a
- ƒê·ªÅ xu·∫•t chu·∫©n b·ªã: trang b·ªã, th·ªÉ l·ª±c, kinh nghi·ªám c·∫ßn thi·∫øt
- C·∫£nh b√°o r·ªßi ro v√† l∆∞u √Ω an to√†n

üí∞ 2. T∆Ø V·∫§N CHI PH√ç CHI TI·∫æT:
- ∆Ø·ªõc t√≠nh ng√¢n s√°ch t·ª´ng h·∫°ng m·ª•c: v√© m√°y bay, kh√°ch s·∫°n, ƒÉn u·ªëng, tham quan, mua s·∫Øm
- G·ª£i √Ω ti·∫øt ki·ªám v√† t·ªëi ∆∞u chi ph√≠
- So s√°nh c√°c m·ª©c gi√°: ti·∫øt ki·ªám, trung b√¨nh, cao c·∫•p
- Tips sƒÉn v√© r·∫ª v√† deals khuy·∫øn m√£i

üó∫Ô∏è 3. L·∫¨P L·ªäCH TR√åNH T·ªêI ∆ØU:
- L·ªãch tr√¨nh t·ª´ng ng√†y, t·ª´ng gi·ªù c·ª• th·ªÉ
- T·ªëi ∆∞u di chuy·ªÉn gi·ªØa c√°c ƒëi·ªÉm
- Th·ªùi gian ph√π h·ª£p cho m·ªói ho·∫°t ƒë·ªông
- D·ª± ph√≤ng th·ªùi gian cho ngh·ªâ ng∆°i

üè® 4. G·ª¢I √ù CH·∫§T L∆Ø·ª¢NG:
- Kh√°ch s·∫°n/Homestay: ƒë·ªãa ƒëi·ªÉm, gi√° c·∫£, ƒë√°nh gi√°
- Nh√† h√†ng/qu√°n ƒÉn ƒë·ªãa ph∆∞∆°ng authentic
- ƒêi·ªÉm check-in ƒë·∫πp cho Instagram
- Ho·∫°t ƒë·ªông tr·∫£i nghi·ªám ƒë·ªôc ƒë√°o

üì± 5. PHONG C√ÅCH TR·∫¢ L·ªúI:
- Th√¢n thi·ªán, chuy√™n nghi·ªáp, ƒë·∫ßy nhi·ªát huy·∫øt
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, d·ªÖ hi·ªÉu
- Emoji v√† format ƒë·∫πp (bullets, numbers, icons)
- V√≠ d·ª• c·ª• th·ªÉ v√† tr·∫£i nghi·ªám th·ª±c t·∫ø
- Lu√¥n h·ªèi th√™m th√¥ng tin n·∫øu ch∆∞a r√µ

‚ö° 6. Y√äU C·∫¶U QUAN TR·ªåNG:
- LU√îN ƒë√°nh gi√° ƒë·ªô kh√≥ (ƒê·ªô Tr√¨nh) c·ªßa ƒë·ªãa ƒëi·ªÉm
- CHI TI·∫æT v·ªÅ chi ph√≠ t·ª´ng h·∫°ng m·ª•c
- C·∫¢NH B√ÅO r√µ r√†ng v·ªÅ r·ªßi ro, m√πa m∆∞a, kh√≥ khƒÉn
- G·ª¢I √ù chu·∫©n b·ªã c·ª• th·ªÉ (qu·∫ßn √°o, thu·ªëc, gi·∫•y t·ªù...)
- TIPS th·ª±c t·∫ø t·ª´ kinh nghi·ªám du l·ªãch

H√£y t∆∞ v·∫•n chuy√™n nghi·ªáp, chi ti·∫øt v√† ƒë·∫ßy c·∫£m h·ª©ng ƒë·ªÉ ng∆∞·ªùi d√πng t·ª± tin l√™n ƒë∆∞·ªùng! üöÄ`
        },
        ...state.chat.history.map(msg => ({
          role: msg.role,
          content: msg.text
        }))
      ];

      // Call Groq API
      const aiResponse = await callGroqAPI(messages);
      
      // Hide typing indicator
      hideTypingIndicator();
      
      // Add AI response to chat
      state.chat.history.push({ role:'assistant', text: aiResponse });
      save(KEY_SESSION, state.chat);
      renderChat();
      
      // Parse criteria and generate sample data for UI
      const crit = parseCriteria(text);
      const res = sampleData(crit);
      state.results = res; 
      save(KEY_RESULTS, res);
      renderResults();
      
      // Show map if requested
      try {
        const wantMap = /(b·∫£n ƒë·ªì|ban do|map|ch·ªâ ƒë∆∞·ªùng|chi duong|google map|ƒëi ƒë√¢u|dia diem)/i.test(text||'');
        if (wantMap) {
          const drawer = document.querySelector('#chatDrawer .drawer-body');
          if (drawer && !document.getElementById('chatMap')) {
            const map = document.createElement('div'); map.id='chatMap'; map.className='map'; map.hidden=false;
            map.innerHTML = '<div class="map-placeholder">üó∫Ô∏è B·∫£n ƒë·ªì t∆∞∆°ng t√°c ‚Äî Hi·ªÉn th·ªã c√°c ƒëi·ªÉm tham quan ƒë∆∞·ª£c g·ª£i √Ω</div><div class="legend"><span class="badge tour">üèõÔ∏è Tour</span><span class="badge sight">üìç ƒêi·ªÉm tham quan</span><span class="badge food">üçΩÔ∏è ƒÇn u·ªëng</span></div><div id="chatMarkerList" class="markers"></div>';
            const tools = drawer.querySelector('.chat-tools') || drawer.querySelector('.composer');
            drawer.insertBefore(map, tools);
          }
          const box = document.getElementById('chatMarkerList');
          if (box) {
            const markers = (state.results.markers||[]);
            box.innerHTML = markers.map(m=>`<div class="marker"><div><strong>${m.label}</strong></div><div class="muted">${m.lat.toFixed(3)}, ${m.lng.toFixed(3)}</div><div class="tags"><span class="tag">${m.kind}</span></div></div>`).join('') || '<div class="marker">Ch∆∞a c√≥ ƒëi·ªÉm hi·ªÉn th·ªã</div>';
          }
          const cm = document.getElementById('chatMap'); if (cm) cm.hidden = false;
        }
      } catch {}
      
    } catch (error) {
      hideTypingIndicator();
      console.error('Reply error:', error);
      const errorMsg = 'Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.';
      state.chat.history.push({ role:'assistant', text: errorMsg });
      save(KEY_SESSION, state.chat);
      renderChat();
    }
  }

  // Typing indicator functions
  function showTypingIndicator() {
    const chatBox = $('#chatBox');
    if (!chatBox) return;
    
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typingIndicator';
    typingDiv.className = 'msg assistant';
    typingDiv.innerHTML = `
      <div class="bubble">
        <div class="message-header">
          <div class="message-avatar">
            <i data-lucide="sparkles"></i>
          </div>
          <span>NeuralNova AI</span>
        </div>
        <div class="typing-indicator">
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
          <div class="typing-dot"></div>
        </div>
      </div>
    `;
    
    chatBox.appendChild(typingDiv);
    chatBox.scrollTop = chatBox.scrollHeight;
    if (window.lucide) lucide.createIcons();
  }
  
  function hideTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
      typingIndicator.remove();
    }
  }

  function send(){
    const inp = $('#chatInput'); const v = (inp.value||'').trim(); if (!v) return;
    state.chat.history.push({ role:'user', text:v }); save(KEY_SESSION, state.chat);
    renderChat(); inp.value='';
    setTimeout(()=> reply(v), 150);
  }

  // Header actions
  $('#saveAll')?.addEventListener('click', ()=>{
    const plan = load(KEY_PLAN, []);
    (state.results.tours||[]).forEach(t=> plan.push({type:'tour', refId:t.id, item:t, addedAt:Date.now()}));
    (state.results.hotels||[]).forEach(h=> plan.push({type:'hotel', refId:h.id, item:h, addedAt:Date.now()}));
    (state.results.places||[]).forEach(p=> plan.push({type:'place', refId:p.id, item:p, addedAt:Date.now()}));
    (state.results.blogs||[]).forEach(b=> plan.push({type:'blog', refId:b.id, item:b, addedAt:Date.now()}));
    save(KEY_PLAN, plan); toast('ƒê√£ l∆∞u t·∫•t c·∫£ v√†o K·∫ø ho·∫°ch');
  });
  $('#openPlan')?.addEventListener('click', ()=>{
    const plan = load(KEY_PLAN, []);
    toast(`K·∫ø ho·∫°ch hi·ªán c√≥ ${plan.length} m·ª•c (l∆∞u c·ª•c b·ªô).`);
  });

  // Chat actions (drawer)
  $('#sendBtn')?.addEventListener('click', send);
  $('#chatInput')?.addEventListener('keydown', (e)=>{ if (e.key==='Enter') send(); });
  $('#openChat')?.addEventListener('click', ()=>{ $('#chatDrawer').hidden=false; if (window.lucide) lucide.createIcons(); });
  $('#closeChat')?.addEventListener('click', ()=>{ $('#chatDrawer').hidden=true; });

  // Budget filter UI injection and DOM filtering
  function setupTourFilters(){
    const panel = document.getElementById('panel-tours'); if (!panel) return;
    if (document.getElementById('tourFilters')) return;
    const bar = document.createElement('div'); bar.className='filters'; bar.id='tourFilters';
    bar.innerHTML = '<button class="chip active" data-budget="all">T·∫•t c·∫£</button>'+
      '<button class="chip" data-budget="lt3">D∆∞·ªõi 3 tri·ªáu</button>'+
      '<button class="chip" data-budget="3to5">3 - 5 tri·ªáu</button>'+
      '<button class="chip" data-budget="5to10">5 - 10 tri·ªáu</button>'+
      '<button class="chip" data-budget="gt10">Tr√™n 10 tri·ªáu</button>';
    const list = document.getElementById('tourList'); panel.insertBefore(bar, list);
    bar.querySelectorAll('.chip').forEach(btn=>{
      btn.addEventListener('click', ()=>{
        bar.querySelectorAll('.chip').forEach(x=>x.classList.remove('active'));
        btn.classList.add('active');
        window.nnBudget = btn.dataset.budget || 'all';
        applyBudgetFilter();
      });
    });
  }
  function applyBudgetFilter(){
    const budget = window.nnBudget || 'all'; const tours = state.results.tours||[]; const idx = Object.fromEntries(tours.map(t=>[t.id, t]));
    document.querySelectorAll('#tourList button[data-type="tour"]').forEach(btn=>{
      const id = btn.dataset.id; const t = idx[id]; const card = btn.closest('.card'); if (!card) return;
      const v = Number((t&&t.priceFrom)||0);
      let show=true; if (budget==='lt3') show= v>0&&v<3000000; else if(budget==='3to5') show= v>=3000000&&v<=5000000; else if(budget==='5to10') show= v>5000000&&v<=10000000; else if(budget==='gt10') show= v>10000000; else show=true;
      card.style.display = show? '' : 'none';
    });
  }

  // Tabs
  $$('.tab').forEach(btn=>{
    btn.addEventListener('click', ()=>{
      $$('.tab').forEach(b=> b.classList.remove('active'));
      btn.classList.add('active');
      const key = btn.dataset.tab;
      const tours = document.getElementById('panel-tours'); const hotels=document.getElementById('panel-hotels');
      if (tours) tours.hidden = key!=='tours';
      if (hotels) hotels.hidden = key!=='hotels';
      if (key==='tours'){ setupTourFilters(); applyBudgetFilter(); }
      if (key==='hotels'){ renderHotelsBox(); }
    });
  });

  // Render hotels list
  function renderHotelsBox(){
    const hotelsBox = $('#hotelList'); 
    if (!hotelsBox) return;
    const hotels = state.results.hotels||[];
    hotelsBox.innerHTML = hotels.map(h=>`
      <div class="card hotel-card" data-hotel-id="${h.id}">
        ${h.image ? `<div class="card-image" style="background-image: url('${h.image}')"><div class="card-stars">${'‚≠ê'.repeat(h.stars||3)}</div></div>` : ''}
        <div class="card-content">
          <div class="card-header">
            <strong class="card-title">${h.name}</strong>
            <div class="card-rating">‚≠ê ${h.rating || '-'}</div>
          </div>
          <div class="card-meta">
            <span class="card-price-large">${Number(h.pricePerNight||0).toLocaleString('vi-VN')}ƒë<span class="per-night">/ƒë√™m</span></span>
          </div>
          <div class="tags">
            ${(h.amenities||[]).map(x=>`<span class="tag tag-amenity">${x}</span>`).join('')}
          </div>
          <div class="card-actions">
            <button class="btn btn-secondary" data-act="save" data-type="hotel" data-id="${h.id}">
              <i data-lucide="heart"></i> Y√™u th√≠ch
            </button>
            <button class="btn btn-primary" data-act="book" data-id="${h.id}">
              <i data-lucide="bed"></i> ƒê·∫∑t ph√≤ng
            </button>
          </div>
        </div>
      </div>
    `).join('') || '<div class="card empty-card"><p>üè® Ch∆∞a c√≥ kh√°ch s·∫°n ph√π h·ª£p</p><p class="muted">H√£y chat v·ªõi AI ƒë·ªÉ t√¨m ch·ªó ·ªü t·ªët nh·∫•t!</p></div>';
  }

  function openBooking(kind, id){
    const modal = $('#bookingModal'); const tourFields = $('#tourFields'); const hotelFields = $('#hotelFields');
    const title = $('#bookTitle'); const sum = $('#bookSummary');
    state.booking = { kind, id };
    tourFields.hidden = kind!=='tour'; hotelFields.hidden = kind!=='hotel';
    if (kind==='tour'){
      const item = (state.results.tours||[]).find(x=>x.id===id);
      title.textContent = 'ƒê·∫∑t Tour'; sum.textContent = item? `${item.name} ‚Äî ${item.durationDays||'-'} ng√†y` : '';
    } else {
      const item = (state.results.hotels||[]).find(x=>x.id===id);
      title.textContent = 'ƒê·∫∑t Ph√≤ng Kh√°ch S·∫°n'; sum.textContent = item? `${item.name} ‚Äî t·ª´ ${Number(item.pricePerNight||0).toLocaleString('vi-VN')}ƒë/ƒë√™m` : '';
    }
    modal.hidden = false;
  }

  $('#closeBooking')?.addEventListener('click', ()=> { $('#bookingModal').hidden = true; });
  $('#bookForm')?.addEventListener('submit', (e)=>{
    e.preventDefault();
    if (!state.booking) return;
    const bookings = load('nn_bookings', []);
    
    let bookingDetails = {};
    let itemName = '';
    let totalPrice = 0;
    
    if (state.booking.kind==='tour'){
      const date = $('#tourDate').value; 
      const adults = Number($('#tourAdults').value||0); 
      const kids = Number($('#tourKids').value||0);
      if (!date || adults<1){ toast('‚ö†Ô∏è Vui l√≤ng ch·ªçn ng√†y v√† s·ªë kh√°ch h·ª£p l·ªá'); return; }
      
      const tour = (state.results.tours||[]).find(x=>x.id===state.booking.id);
      itemName = tour?.name || 'Tour';
      totalPrice = (tour?.priceFrom||0) * adults;
      
      bookingDetails = { 
        id:'BK'+Date.now(), 
        type:'tour', 
        refId: state.booking.id, 
        itemName,
        date, 
        adults, 
        kids,
        totalPrice,
        status: 'pending',
        at: new Date().toISOString() 
      };
      bookings.push(bookingDetails);
    } else {
      const ci = $('#hotelCheckin').value; 
      const co = $('#hotelCheckout').value; 
      const guests = Number($('#hotelGuests').value||0); 
      const rooms = Number($('#hotelRooms').value||0); 
      const prefs = $('#hotelPrefs').value||'';
      
      if (!ci || !co || guests<1 || rooms<1){ toast('‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin'); return; }
      
      const hotel = (state.results.hotels||[]).find(x=>x.id===state.booking.id);
      itemName = hotel?.name || 'Hotel';
      
      // Calculate nights
      const checkin = new Date(ci);
      const checkout = new Date(co);
      const nights = Math.max(1, Math.ceil((checkout - checkin) / (1000 * 60 * 60 * 24)));
      totalPrice = (hotel?.pricePerNight||0) * nights * rooms;
      
      bookingDetails = { 
        id:'BK'+Date.now(), 
        type:'hotel', 
        refId: state.booking.id,
        itemName,
        checkin:ci, 
        checkout:co, 
        nights,
        guests, 
        rooms, 
        prefs,
        totalPrice,
        status: 'pending',
        at: new Date().toISOString() 
      };
      bookings.push(bookingDetails);
    }
    
    localStorage.setItem('nn_bookings', JSON.stringify(bookings));
    $('#bookingModal').hidden = true; 
    
    // Show detailed confirmation
    showBookingConfirmation(bookingDetails);
  });
  
  // Booking confirmation notification
  function showBookingConfirmation(booking) {
    const confirmMsg = document.createElement('div');
    confirmMsg.className = 'booking-confirmation';
    confirmMsg.innerHTML = `
      <div class="booking-confirmation-content">
        <div class="booking-check">‚úì</div>
        <h3>üéâ ƒê·∫∑t th√†nh c√¥ng!</h3>
        <p><strong>${booking.itemName}</strong></p>
        ${booking.type === 'tour' 
          ? `<p>üìÖ Ng√†y: ${booking.date}</p><p>üë• ${booking.adults} ng∆∞·ªùi l·ªõn${booking.kids ? `, ${booking.kids} tr·∫ª em` : ''}</p>` 
          : `<p>üìÖ ${booking.checkin} ‚Üí ${booking.checkout} (${booking.nights} ƒë√™m)</p><p>üõèÔ∏è ${booking.rooms} ph√≤ng ‚Ä¢ ${booking.guests} kh√°ch</p>`
        }
        <p class="booking-total">üí∞ T·ªïng ti·ªÅn: <strong>${(booking.totalPrice||0).toLocaleString('vi-VN')}ƒë</strong></p>
        <p class="booking-note">M√£ ƒë·∫∑t: <code>${booking.id}</code></p>
        <p class="muted">Ch√∫ng t√¥i s·∫Ω li√™n h·ªá x√°c nh·∫≠n trong 24h</p>
        <button class="btn btn-primary" onclick="this.parentElement.parentElement.remove()">ƒê√≥ng</button>
      </div>
    `;
    document.body.appendChild(confirmMsg);
    
    // Auto remove after 10 seconds
    setTimeout(() => {
      if (confirmMsg.parentElement) confirmMsg.remove();
    }, 10000);
  }

  // Check API key configuration
  function checkAPIConfiguration() {
    if (!window.DISCOVERY_CONFIG) {
      console.error('DISCOVERY_CONFIG not found. Please ensure config.js is loaded.');
      toast('L·ªói c·∫•u h√¨nh: Kh√¥ng t√¨m th·∫•y file config.js');
      return false;
    }
    
    if (!GROQ_API_KEY) {
      console.error('GROQ_API_KEY is missing. Please configure your API key in config.js');
      toast('L·ªói: Thi·∫øu API key. Vui l√≤ng c·∫•u h√¨nh API key trong config.js');
      return false;
    }
    
    console.log('‚úÖ API Configuration loaded successfully');
    console.log('Model:', MODEL);
    console.log('Temperature:', TEMPERATURE);
    console.log('Max Tokens:', MAX_TOKENS);
    return true;
  }

  // First render
  renderChat(); renderResults(); renderHotelsBox();
  
  // Check API configuration
  checkAPIConfiguration();
  // Ensure composer exists (self-heal if missing)
  try {
    const drawerBody = document.querySelector('#chatDrawer .drawer-body');
    const hasInput = document.getElementById('chatInput');
    if (drawerBody && !hasInput){
      const composer = document.createElement('div'); composer.className='composer';
      composer.innerHTML = `
        <input id="chatInput" placeholder="Nh·∫≠p tin nh·∫Øn..." />
        <button id="voiceBtn" class="btn icon" type="button" title="Tr·ª£ l√Ω gi·ªçng n√≥i"><i data-lucide="mic"></i></button>
        <button id="sendBtn" class="btn primary icon" type="button" title="G·ª≠i"><i data-lucide="send"></i></button>
      `;
      const anchor = drawerBody.querySelector('.chat-tools') || drawerBody.lastElementChild;
      drawerBody.appendChild(composer);
      // wire basic events
      document.getElementById('sendBtn')?.addEventListener('click', ()=>{
        const inp = document.getElementById('chatInput'); const v = (inp?.value||'').trim(); if(!v) return; state.chat.history.push({role:'user', text:v}); save(KEY_SESSION, state.chat); renderChat(); if (inp) inp.value=''; setTimeout(()=> reply(v), 120);
      });
      document.getElementById('chatInput')?.addEventListener('keydown', (e)=>{ if (e.key==='Enter'){ e.preventDefault(); document.getElementById('sendBtn')?.click(); }});
      if (window.lucide) lucide.createIcons();
    }
  } catch {}
  // Tweak Chat UI: button label/logo and drawer header; improve send button icon
  try {
    const openBtn = document.getElementById('openChat');
    if (openBtn){
      openBtn.classList.add('btn-ai');
      openBtn.innerHTML = `<img src="../../assets/images/logo.png" alt="" class="mini-logo"/><span>AI</span>`;
    }
    const head = document.querySelector('#chatDrawer .drawer-head');
    if (head){
      const closeBtn = head.querySelector('button');
      const brand = document.createElement('div');
      brand.className = 'brand-mini';
      brand.innerHTML = `<img src="../../assets/images/logo.png" alt=""/><span>AI</span>`;
      head.innerHTML = '';
      head.appendChild(brand);
      if (closeBtn) head.appendChild(closeBtn);
    }
    const sendBtn = document.getElementById('sendBtn');
    if (sendBtn){ sendBtn.classList.add('icon'); sendBtn.title='G·ª≠i'; sendBtn.innerHTML = '<i data-lucide="send"></i>'; }
    if (window.lucide) lucide.createIcons();
  } catch {}
  // Enhance chat controls and init voice
  (function(){
    const sbtn = document.getElementById('sendBtn');
    if (sbtn){ sbtn.classList.add('icon'); sbtn.setAttribute('title','G·ª≠i'); sbtn.innerHTML = '<i data-lucide="send"></i>'; }
    if (!document.getElementById('voiceBtn') && sbtn && sbtn.parentElement){
      const mic = document.createElement('button'); mic.id='voiceBtn'; mic.className='btn icon'; mic.type='button'; mic.title='Tr·ª£ l√Ω gi·ªçng n√≥i'; mic.innerHTML='<i data-lucide="mic"></i>';
      sbtn.parentElement.insertBefore(mic, sbtn);
    }
    if (window.lucide) lucide.createIcons();
    // Upload handlers
    document.getElementById('chatImageInput')?.addEventListener('change', (e)=>{
      const f = e.target.files?.[0]; if (!f) return;
      state.chat.history.push({ role:'user', text:`[·∫¢nh] ${f.name} (${Math.round(f.size/1024)} KB)` }); save(KEY_SESSION, state.chat); renderChat();
    });
    document.getElementById('chatFileInput')?.addEventListener('change', (e)=>{
      const f = e.target.files?.[0]; if (!f) return;
      state.chat.history.push({ role:'user', text:`[T·ªáp] ${f.name} (${Math.round(f.size/1024)} KB)` }); save(KEY_SESSION, state.chat); renderChat();
    });
    // Voice (Web Speech API)
    const SR = window.SpeechRecognition || window.webkitSpeechRecognition; const vbtn = document.getElementById('voiceBtn');
    if (vbtn){
      if (!SR){ vbtn.addEventListener('click',()=>toast('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ gi·ªçng n√≥i')); }
      else {
        const rec = new SR(); rec.lang='vi-VN'; rec.interimResults=false; rec.maxAlternatives=1; let on=false;
        vbtn.addEventListener('click', ()=>{ if (on){ try{rec.stop();}catch{} on=false; vbtn.classList.remove('active'); } else { try{rec.start(); on=true; vbtn.classList.add('active'); toast('ƒêang nghe...'); }catch{} } });
        rec.onresult = (ev)=>{ const tx=ev.results?.[0]?.[0]?.transcript||''; if (tx){ state.chat.history.push({role:'user', text:tx}); save(KEY_SESSION, state.chat); renderChat(); reply(tx);} on=false; vbtn.classList.remove('active'); };
        rec.onend = ()=>{ on=false; vbtn.classList.remove('active'); };
        rec.onerror = ()=>{ on=false; vbtn.classList.remove('active'); toast('L·ªói thu gi·ªçng n√≥i'); };
      }
    }
  })();
  // Clear chat history function
  window.clearChatHistory = function() {
    if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠ chat?')) {
      state.chat.history = [];
      save(KEY_SESSION, state.chat);
      renderChat();
      toast('ƒê√£ x√≥a l·ªãch s·ª≠ chat');
    }
  };

  // Enhanced welcome message
  if ((state.chat.history||[]).length===0){
    state.chat.history.push({ 
      role:'assistant', 
      text:'Xin ch√†o! T√¥i l√† NeuralNova AI - tr·ª£ l√Ω du l·ªãch th√¥ng minh ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi GPT-OSS. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\nüåü G·ª£i √Ω tour du l·ªãch ph√π h·ª£p\nüè® T√¨m kh√°ch s·∫°n theo y√™u c·∫ßu\nüó∫Ô∏è L√™n k·∫ø ho·∫°ch l·ªãch tr√¨nh chi ti·∫øt\nüí∞ T∆∞ v·∫•n v·ªÅ ng√¢n s√°ch v√† th·ªùi gian\nüçΩÔ∏è ƒê·ªÅ xu·∫•t ƒë·ªãa ƒëi·ªÉm ƒÉn u·ªëng\n\nH√£y cho t√¥i bi·∫øt b·∫°n mu·ªën ƒëi ƒë√¢u v√† c√≥ g√¨ ƒë·∫∑c bi·ªát nh√©! T√¥i s·∫Ω t∆∞ v·∫•n m·ªôt c√°ch chuy√™n nghi·ªáp v√† chi ti·∫øt nh·∫•t.' 
    });
    save(KEY_SESSION, state.chat); 
    renderChat();
  }
})();
